# Path to your oh-my-zsh installation.
export ZSH=/home/arthur/.oh-my-zsh

autoload zmv

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="robbyrussell"
ZSH_THEME="agnoster"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git symfony2 composer docker docker-compose yarn postgres zsh-autosuggestions zsh-syntax-highlighting history-sync)

# User configuration

export GOPATH="/home/arthur/go"
export GO111MODULE=on
export GUIX_PROFILE="/home/arthur/.guix-profile"
export NODE_OPTIONS="--max-old-space-size=16384"
export TOOL_NODE_FLAGS="--max-old-space-size=16384"
export ANDROID_HOME=$HOME/Android/Sdk

export PATH="/home/arthur/.n/bin:/home/arthur/.npm-global/bin"
export PATH="${PATH}:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/snap/bin"
export PATH="${PATH}:/home/arthur/.local/bin:/home/arthur/bin"
export PATH=$PATH:$(find $HOME/scripts/ -maxdepth 1 -type d | paste -sd ":" -)
export PATH="${PATH}:/home/arthur/.config/yarn/global/node_modules/.bin:/home/arthur/.yarn/bin"
export PATH="${PATH}:${GOPATH}/bin:/usr/local/go/bin"
export PATH="${PATH}:/home/arthur/.gem/ruby/2.7.0/bin:/home/arthur/.gem/ruby/3.0.0/bin"
export PATH="${PATH}:/${GUIX_PROFILE}/bin"
export PATH="$PATH:/opt/nvim-linux64/bin"
export PATH="$PATH:/home/arthur/installs/ltex-ls-16.0.0/bin"
export PATH="$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools"

# export MANPATH="/usr/local/man:$MANPATH"

# Rust
source $HOME/.cargo/env

export XDG_CONFIG_HOME=/home/arthur/.config/
export XDG_DATA_DIRS="${XDG_DATA_DIRS}:/var/lib/flatpak/exports/share:/home/arthur/.local/share/flatpak/exports/share:/var/lib/snapd/desktop/applications"

source $ZSH/oh-my-zsh.sh
source ~/installs/key-bindings.zsh
source "$GUIX_PROFILE/etc/profile"
#source /usr/share/fzf/completion.zsh

# Add a line break to Oh my ZSH prompt
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
      print -n "%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
      print -n "%{%k%}"
  fi

  print -n "%{%f%}"
  CURRENT_BG=''

  #Adds the new line and ➜ as the start character.
  printf "\n ➜";
}

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi
export VISUAL=nvim
export EDITOR="$VISUAL"
alias vim="$VISUAL"
alias v="$VISUAL"

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Moved that to local file
# export JAVA_HOME=/usr/lib/jvm/java-8-openjdk/jre
# export LD_LIBRARY_PATH=/usr/lib64/nvidia:${LD_LIBRARY_PATH}

export DEFAULT_USER=arthur
export OPENSSL_CONF=/dev/null

export N_PREFIX=~/.n
export CHROME_BIN=/usr/bin/chromium-browser

# PhantomJS issue...
export OPENSSL_CONF=/etc/ssl

#export WORKON_HOME=~/pyenvs
#source /usr/bin/virtualenvwrapper.sh
alias gst='git status'
alias git='git '
alias poule=pull
alias gpm='git add . && git commit -m "auto-push $(date)" && git push origin master'
alias gtop='gpustat -cp --watch'
alias weather="while true; do clear; date && curl -s 'wttr.in/~Lynchburg+VA?2'; sleep 1800; done"

# added by travis gem
[ -f /home/arthur/.travis/travis.sh ] && source /home/arthur/.travis/travis.sh

f_dockerin() {
    docker exec -i -t $1 bash
}
alias dockerin=f_dockerin

f_dockerinsh() {
    docker exec -i -t $1 sh
}
alias dockerinsh=f_dockerinsh
alias de="docker-compose exec -T"

#alias yarn=nodejs-yarn
alias de="docker-compose exec"
alias cat=bat
alias catp=bat -p
alias ping="prettyping --nolegend"
alias preview="fzf --preview 'bat --color \"always\" {}'"
alias du="ncdu --color dark -x --exclude .git --exclude node_modules"
alias yrb="yarn run build"
alias yrd="yarn run dev"
alias yrs="yarn run serve"
alias vimi="vim +PluginInstall +qall"
alias runlike="docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike"
alias k="kubectl"
alias wr="~/bin/wordreference.py"


if [ -f /etc/lsb-release ]; then
  alias up="sudo apt-get update && sudo apt-get upgrade && sudo snap refresh"
  alias i="sudo apt-get install"
elif [ -f /etc/redhat-release ]; then
  alias up="sudo dnf update"
  alias i="sudo dnf install"
fi

if hash ifconfig 2>/dev/null; then
else
  alias ifconfig="ip -c a"
fi

#eval $(thefuck --alias)

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

#thefuck -v >/dev/null 2>&1 && eval $(thefuck --alias)

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/bit bit

export PHPENV_ROOT="/home/arthur/.phpenv"
if [ -d "${PHPENV_ROOT}" ]; then
  export PATH="${PHPENV_ROOT}/bin:${PATH}"
  eval "$(phpenv init -)"
fi


source ~/.dotfiles/zsh/zshrc.local
export PATH=/home/arthur/.meteor:$PATH

cursor() {
    local appimage_path=$(ls /home/arthur/installs/Applications/cursor-*.AppImage | sort -V | tail -n 1)
    if [[ $# -eq 0 ]]; then
        set -- "."
    fi

    if [[ -f $appimage_path ]]; then
        "$appimage_path" --no-sandbox "$@" > /dev/null 2>&1 &
    else
        echo "Cursor AppImage not found on the Desktop."
    fi
}
alias c="cursor ."

alias getgov="cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor"
alias getgov_available="cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors"
function setgov ()
{
     # performance or powersave
     for i in {0..5};
     do
         sudo  cpufreq-set -c $i -g $1; # run cpufreq-set with root
     done
}

function hbenben()
{
  temp_file=$(mktemp)
  curl -sL "$1" -o "$temp_file"
  echo "Downloaded file -> Playing"
  benben "$temp_file"
  rm "$temp_file"
}

export MANPATH=$HOME/tools/ripgrep/doc/man:$MANPATH
export FPATH=$HOME/tools/ripgrep/complete:$FPATH

# Workaround for kitty only (https://wiki.archlinux.org/title/Kitty#Terminal_issues_with_SSH)
[ "$TERM" = "xterm-kitty" ] && alias ssh="kitty +kitten ssh"


. "$HOME/.atuin/bin/env"

eval "$(atuin init zsh)"

# pnpm
export PNPM_HOME="/home/arthur/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

export NVM_DIR="$HOME/.config//nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# place this after nvm initialization!
autoload -U add-zsh-hook

load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version
    nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc

